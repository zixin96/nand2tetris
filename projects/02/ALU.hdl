// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
	// should we set x or y to zero? 
	Mux16(a=x ,b=false ,sel=zx ,out=step1x );
	Mux16(a=y ,b=false ,sel=zy ,out=step1y );

	// should we negate the above result? 
	Not16(in=step1x, out=step1xnegate);
	Not16(in=step1y, out=step1ynegate);
	Mux16(a=step1x ,b=step1xnegate ,sel=nx ,out=step2x );
	Mux16(a=step1y ,b=step1ynegate ,sel=ny ,out=step2y );

	// + or & on the preprocessed values
	Add16(a=step2x ,b=step2y ,out=firstchoice );
	And16(a=step2x ,b=step2y ,out=secondchoice ); 
	Mux16(a=secondchoice ,b=firstchoice ,sel=f ,out=computingResult );

	// negate the resulting value? 
	Not16(in=computingResult ,out=computingResultnegate ); 
	Mux16(a=computingResult ,b=computingResultnegate ,sel=no ,out=out, out[15]=ng, out[0..7]=lower8, out[8..15]=higher8 );
	// negative test logic: the 15th bit indicates whether the number is negative or not
	// zero test logic: extract lower8 and higher8 to fit into Or8Way
	// The result of Or8Way indicates whether those 8 bits have any 1s 
	Or8Way(in=lower8 ,out= result1); 
	Or8Way(in=higher8 ,out= result2);
	// Or these result will tell us if there is a 1 in any of the 16 bits
	Or(a=result1 ,b=result2 ,out=result3 );
	// since we want zr to be 1 when there is no 1s in any of the 16 bits, we negate the above result
	Not(in=result3, out=zr);
}