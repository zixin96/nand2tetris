// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=ALUOut ,b=instruction ,sel=NotInst15 ,out=m1out ); //Mux16A
    Not(in=instruction[15] ,out=NotInst15 );

    And(a=instruction[5] ,b=instruction[15] ,out=a1 );
    Or(a=a1 ,b=NotInst15 ,out=Or1Out );

    ARegister(in=m1out ,load=Or1Out ,out=ARegistOut, out[0..14]=addressM ); 
    And(a=instruction[3] ,b=instruction[15] ,out=writeM );


    Mux16(a=ARegistOut ,b=inM ,sel=instruction[12] ,out=m2out ); //Mux16B
    ALU(x=DRegistOut ,y=m2out ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=ALUOut, out=outM ,zr=ZeroOut ,ng=NgOut );
    And(a=instruction[4] ,b=instruction[15] ,out=a2 );
    DRegister(in=ALUOut ,load=a2 ,out=DRegistOut );

    PC(in=ARegistOut ,load=LoadDMuxOut ,inc=IncDMuxOut ,reset=reset ,out[0..14]=pc ); 

    Not(in=NgOut ,out=NotNgOut );
    Not(in=ZeroOut ,out=NotZeroOut );
    And(a=NotNgOut ,b=NotZeroOut ,out=PoOut );

    And(a=NgOut ,b=instruction[2] ,out=And1Out );
    And(a=ZeroOut ,b=instruction[1] ,out=And2Out );
    And(a=PoOut ,b=instruction[0] ,out=And3Out );
    Or(a=And1Out ,b=And2Out ,out=OrJumpOut );
    Or(a=OrJumpOut ,b=And3Out ,out=OrResultOut );
    And(a=instruction[15], b=OrResultOut, out=OrResultOut1);
    DMux(in=true ,sel=OrResultOut1 ,a=IncDMuxOut ,b=LoadDMuxOut ); 
}